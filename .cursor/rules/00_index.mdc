---
description: Master index of all Simplexity cursor rules with selection strategy and quick reference guide
globs: 
alwaysApply: false
---
---
description: Master index of all Simplexity cursor rules with selection strategy and quick reference guide
keywords: [index, overview, rule selection, navigation]
use_when: Starting any task, need to understand available rules, or unsure which rules to load
load_priority: first
---
# Simplexity Cursor Rules Index

This is the master index for all cursor rules in the Simplexity project. Each rule is designed to provide focused guidance for specific aspects of the codebase.

## Core Framework Rules

### 1. Framework Overview
- **Rule: 01_framework_overview.mdc**
  - Description: High-level architecture and design principles
  - Use when: Starting a new feature, understanding overall structure

### 2. Configuration System
- **Rule: 02_hydra_configuration.mdc**
  - Description: Hydra configuration patterns and best practices
  - Use when: Adding new configs, modifying experiment settings

### 3. Experiment Workflow
- **Rule: 03_experiment_workflow.mdc**
  - Description: Running experiments and hyperparameter optimization
  - Use when: Setting up experiments, using Optuna sweeps

## Component-Specific Rules

### 4. Generative Processes
- **Rule: 04_generative_processes.mdc**
  - Description: Creating and using data generation components
  - Use when: Adding new generative processes, understanding data flow

### 5. Predictive Models
- **Rule: 05_predictive_models.mdc**
  - Description: Model architecture patterns and integration
  - Use when: Adding new models, integrating external libraries

### 6. Training System
- **Rule: 06_training_system.mdc**
  - Description: Training loops, optimizers, and best practices
  - Use when: Modifying training behavior, debugging training issues

### 7. Persistence & Checkpointing
- **Rule: 07_persistence.mdc**
  - Description: Model saving, loading, and checkpoint management
  - Use when: Working with model persistence, S3 integration

### 8. Evaluation & Metrics
- **Rule: 08_evaluation.mdc**
  - Description: Model evaluation and metric computation
  - Use when: Adding new metrics, understanding validation

### 9. Logging & Tracking
- **Rule: 09_logging.mdc**
  - Description: MLflow integration and experiment tracking
  - Use when: Setting up logging, tracking experiments

## Development Rules

### 10. Testing Patterns
- **Rule: 10_testing.mdc**
  - Description: Test structure and testing best practices
  - Use when: Writing tests, understanding test patterns

### 11. Code Style & Conventions
- **Rule: 11_code_style.mdc**
  - Description: Project conventions and coding standards
  - Use when: Contributing code, reviewing PRs

### 12. Common Patterns
- **Rule: 12_common_patterns.mdc**
  - Description: Frequently used patterns and utilities
  - Use when: Implementing common functionality

## Workflow Rules

### Agent Personality
- **Rule: simplexity-agent.mdc**
  - Description: Primary agent personality and operational guide for Simplexity framework
  - Use when: Always applied for Simplexity agents

### Task Management
- **Rule: create-prd.mdc**
  - Description: Guides the creation of a Product Requirements Document (PRD) for new features or experiments
  - Use when: Planning new features or experiments

- **Rule: create-tasks.mdc**
  - Description: Generates a detailed Markdown task list from a PRD
  - Use when: Converting PRDs to actionable task lists

- **Rule: process-task-list.mdc**
  - Description: Guides the process of implementing tasks from a generated task list
  - Use when: Working through implementation tasks

## Quick Reference

For most tasks, you'll want to load:
1. This index (00_index.mdc)
2. Framework overview (01_framework_overview.mdc)
3. The specific component rule(s) for your task
4. Code style guide (11_code_style.mdc) if making changes

## Rule Selection Strategy

When working on a task:
1. Always start with this index
2. Load the framework overview for context
3. Load specific component rules based on your task
4. Consider loading common patterns if implementing new features
5. Load testing patterns if writing tests

